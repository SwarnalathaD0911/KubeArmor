syntax = "proto3";
 
package feeder;

// option go_package="github.com/accuknox/KubeArmor/protobuf";

// Health check
message NonceMessage {
  int32 nonce = 1;
}

// message struct
message Message {
  string UpdatedTime = 1;

  string Source = 2;
  string SourceIP = 3;

  string Level = 4;
  string Message = 5;
}

message HostStatType {
  string HostName = 1;

  int32 AllowedCount = 2;
  int32 AuditedCount = 3;
  int32 BlockedCount = 4;
  int32 FailedCount = 5;
}

message NamespaceStatType {
  string HostName = 1;
  string NamespaceName = 2;

  int32 AllowedCount = 3;
  int32 AuditedCount = 4;
  int32 BlockedCount = 5;
  int32 FailedCount = 6;
}

message PodStatType {
  string HostName = 1;
  string NamespaceName = 2;
  string PodName = 3;

  int32 AllowedCount = 4;
  int32 AuditedCount = 5;
  int32 BlockedCount = 6;
  int32 FailedCount = 7;
}

message ContainerStatType {
  string HostName = 1;
  string NamespaceName = 2;
  string PodName = 3;
  string ContainerName = 4;

  int32 AllowedCount = 5;
  int32 AuditedCount = 6;
  int32 BlockedCount = 7;
  int32 FailedCount = 8;
}

// Stats struct
message Stats {
  string UpdatedTime = 1;

  HostStatType HostStats = 2;
  repeated NamespaceStatType NamespaceStats = 3;
  repeated PodStatType PodStats = 4;
  repeated ContainerStatType ContainerStats = 5;
}

// log struct
message Log {
  string UpdatedTime = 1;

  string HostName = 2;

  string NamespaceName = 3;
  string PodName = 4;

  string ContainerID = 5;
  string ContainerName = 6;

  int32 HostPID = 7;
  int32 PPID = 8;
  int32 PID = 9;
  int32 UID = 10;

  string PolicyName = 11;
  string Severity = 12;

  string Type = 13;
  string Source = 14;
  string Operation = 15;
  string Resource = 16;
  string Data = 17;

  string Action = 18;
  string Result = 19;
}

// request message
message RequestMessage {
  string Filter = 1;
}

// reply message
message ReplyMessage {
  int32 Retval = 1;
}

service LogService {
  rpc HealthCheck(NonceMessage) returns (ReplyMessage);
  rpc WatchMessages(RequestMessage) returns (stream Message);
  rpc WatchStatistics(RequestMessage) returns (stream Stats);
  rpc WatchLogs(RequestMessage) returns (stream Log);
}
