// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: kubearmor.proto

package feeder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Health check
type NonceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce int32 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *NonceMessage) Reset() {
	*x = NonceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubearmor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonceMessage) ProtoMessage() {}

func (x *NonceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonceMessage.ProtoReflect.Descriptor instead.
func (*NonceMessage) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{0}
}

func (x *NonceMessage) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

// message struct
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedTime string `protobuf:"bytes,1,opt,name=UpdatedTime,proto3" json:"UpdatedTime"`
	Source      string `protobuf:"bytes,2,opt,name=Source,proto3" json:"Source"`
	SourceIP    string `protobuf:"bytes,3,opt,name=SourceIP,proto3" json:"SourceIP"`
	Level       string `protobuf:"bytes,4,opt,name=Level,proto3" json:"Level"`
	Message     string `protobuf:"bytes,5,opt,name=Message,proto3" json:"Message"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubearmor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *Message) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Message) GetSourceIP() string {
	if x != nil {
		return x.SourceIP
	}
	return ""
}

func (x *Message) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Message) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type HostStatType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName     string `protobuf:"bytes,1,opt,name=HostName,proto3" json:"HostName"`
	AllowedCount int32  `protobuf:"varint,2,opt,name=AllowedCount,proto3" json:"AllowedCount"`
	AuditedCount int32  `protobuf:"varint,3,opt,name=AuditedCount,proto3" json:"AuditedCount"`
	BlockedCount int32  `protobuf:"varint,4,opt,name=BlockedCount,proto3" json:"BlockedCount"`
	FailedCount  int32  `protobuf:"varint,5,opt,name=FailedCount,proto3" json:"FailedCount"`
}

func (x *HostStatType) Reset() {
	*x = HostStatType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubearmor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostStatType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostStatType) ProtoMessage() {}

func (x *HostStatType) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostStatType.ProtoReflect.Descriptor instead.
func (*HostStatType) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{2}
}

func (x *HostStatType) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *HostStatType) GetAllowedCount() int32 {
	if x != nil {
		return x.AllowedCount
	}
	return 0
}

func (x *HostStatType) GetAuditedCount() int32 {
	if x != nil {
		return x.AuditedCount
	}
	return 0
}

func (x *HostStatType) GetBlockedCount() int32 {
	if x != nil {
		return x.BlockedCount
	}
	return 0
}

func (x *HostStatType) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

type NamespaceStatType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName      string `protobuf:"bytes,1,opt,name=HostName,proto3" json:"HostName"`
	NamespaceName string `protobuf:"bytes,2,opt,name=NamespaceName,proto3" json:"NamespaceName"`
	AllowedCount  int32  `protobuf:"varint,3,opt,name=AllowedCount,proto3" json:"AllowedCount"`
	AuditedCount  int32  `protobuf:"varint,4,opt,name=AuditedCount,proto3" json:"AuditedCount"`
	BlockedCount  int32  `protobuf:"varint,5,opt,name=BlockedCount,proto3" json:"BlockedCount"`
	FailedCount   int32  `protobuf:"varint,6,opt,name=FailedCount,proto3" json:"FailedCount"`
}

func (x *NamespaceStatType) Reset() {
	*x = NamespaceStatType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubearmor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceStatType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceStatType) ProtoMessage() {}

func (x *NamespaceStatType) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceStatType.ProtoReflect.Descriptor instead.
func (*NamespaceStatType) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{3}
}

func (x *NamespaceStatType) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *NamespaceStatType) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *NamespaceStatType) GetAllowedCount() int32 {
	if x != nil {
		return x.AllowedCount
	}
	return 0
}

func (x *NamespaceStatType) GetAuditedCount() int32 {
	if x != nil {
		return x.AuditedCount
	}
	return 0
}

func (x *NamespaceStatType) GetBlockedCount() int32 {
	if x != nil {
		return x.BlockedCount
	}
	return 0
}

func (x *NamespaceStatType) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

type PodStatType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName      string `protobuf:"bytes,1,opt,name=HostName,proto3" json:"HostName"`
	NamespaceName string `protobuf:"bytes,2,opt,name=NamespaceName,proto3" json:"NamespaceName"`
	PodName       string `protobuf:"bytes,3,opt,name=PodName,proto3" json:"PodName"`
	AllowedCount  int32  `protobuf:"varint,4,opt,name=AllowedCount,proto3" json:"AllowedCount"`
	AuditedCount  int32  `protobuf:"varint,5,opt,name=AuditedCount,proto3" json:"AuditedCount"`
	BlockedCount  int32  `protobuf:"varint,6,opt,name=BlockedCount,proto3" json:"BlockedCount"`
	FailedCount   int32  `protobuf:"varint,7,opt,name=FailedCount,proto3" json:"FailedCount"`
}

func (x *PodStatType) Reset() {
	*x = PodStatType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubearmor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatType) ProtoMessage() {}

func (x *PodStatType) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatType.ProtoReflect.Descriptor instead.
func (*PodStatType) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{4}
}

func (x *PodStatType) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *PodStatType) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *PodStatType) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *PodStatType) GetAllowedCount() int32 {
	if x != nil {
		return x.AllowedCount
	}
	return 0
}

func (x *PodStatType) GetAuditedCount() int32 {
	if x != nil {
		return x.AuditedCount
	}
	return 0
}

func (x *PodStatType) GetBlockedCount() int32 {
	if x != nil {
		return x.BlockedCount
	}
	return 0
}

func (x *PodStatType) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

type ContainerStatType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName      string `protobuf:"bytes,1,opt,name=HostName,proto3" json:"HostName"`
	NamespaceName string `protobuf:"bytes,2,opt,name=NamespaceName,proto3" json:"NamespaceName"`
	PodName       string `protobuf:"bytes,3,opt,name=PodName,proto3" json:"PodName"`
	ContainerName string `protobuf:"bytes,4,opt,name=ContainerName,proto3" json:"ContainerName"`
	AllowedCount  int32  `protobuf:"varint,5,opt,name=AllowedCount,proto3" json:"AllowedCount"`
	AuditedCount  int32  `protobuf:"varint,6,opt,name=AuditedCount,proto3" json:"AuditedCount"`
	BlockedCount  int32  `protobuf:"varint,7,opt,name=BlockedCount,proto3" json:"BlockedCount"`
	FailedCount   int32  `protobuf:"varint,8,opt,name=FailedCount,proto3" json:"FailedCount"`
}

func (x *ContainerStatType) Reset() {
	*x = ContainerStatType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubearmor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStatType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStatType) ProtoMessage() {}

func (x *ContainerStatType) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStatType.ProtoReflect.Descriptor instead.
func (*ContainerStatType) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{5}
}

func (x *ContainerStatType) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ContainerStatType) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *ContainerStatType) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ContainerStatType) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *ContainerStatType) GetAllowedCount() int32 {
	if x != nil {
		return x.AllowedCount
	}
	return 0
}

func (x *ContainerStatType) GetAuditedCount() int32 {
	if x != nil {
		return x.AuditedCount
	}
	return 0
}

func (x *ContainerStatType) GetBlockedCount() int32 {
	if x != nil {
		return x.BlockedCount
	}
	return 0
}

func (x *ContainerStatType) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

// Stats struct
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedTime    string               `protobuf:"bytes,1,opt,name=UpdatedTime,proto3" json:"UpdatedTime"`
	HostStats      *HostStatType        `protobuf:"bytes,2,opt,name=HostStats,proto3" json:"HostStats"`
	NamespaceStats []*NamespaceStatType `protobuf:"bytes,3,rep,name=NamespaceStats,proto3" json:"NamespaceStats"`
	PodStats       []*PodStatType       `protobuf:"bytes,4,rep,name=PodStats,proto3" json:"PodStats"`
	ContainerStats []*ContainerStatType `protobuf:"bytes,5,rep,name=ContainerStats,proto3" json:"ContainerStats"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubearmor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{6}
}

func (x *Stats) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *Stats) GetHostStats() *HostStatType {
	if x != nil {
		return x.HostStats
	}
	return nil
}

func (x *Stats) GetNamespaceStats() []*NamespaceStatType {
	if x != nil {
		return x.NamespaceStats
	}
	return nil
}

func (x *Stats) GetPodStats() []*PodStatType {
	if x != nil {
		return x.PodStats
	}
	return nil
}

func (x *Stats) GetContainerStats() []*ContainerStatType {
	if x != nil {
		return x.ContainerStats
	}
	return nil
}

// log struct
type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedTime   string `protobuf:"bytes,1,opt,name=UpdatedTime,proto3" json:"UpdatedTime"`
	HostName      string `protobuf:"bytes,2,opt,name=HostName,proto3" json:"HostName"`
	NamespaceName string `protobuf:"bytes,3,opt,name=NamespaceName,proto3" json:"NamespaceName"`
	PodName       string `protobuf:"bytes,4,opt,name=PodName,proto3" json:"PodName"`
	ContainerID   string `protobuf:"bytes,5,opt,name=ContainerID,proto3" json:"ContainerID"`
	ContainerName string `protobuf:"bytes,6,opt,name=ContainerName,proto3" json:"ContainerName"`
	HostPID       int32  `protobuf:"varint,7,opt,name=HostPID,proto3" json:"HostPID"`
	PPID          int32  `protobuf:"varint,8,opt,name=PPID,proto3" json:"PPID"`
	PID           int32  `protobuf:"varint,9,opt,name=PID,proto3" json:"PID"`
	UID           int32  `protobuf:"varint,10,opt,name=UID,proto3" json:"UID"`
	PolicyName    string `protobuf:"bytes,11,opt,name=PolicyName,proto3" json:"PolicyName,omitempty"`
	Severity      string `protobuf:"bytes,12,opt,name=Severity,proto3" json:"Severity,omitempty"`
	Type          string `protobuf:"bytes,13,opt,name=Type,proto3" json:"Type"`
	Source        string `protobuf:"bytes,14,opt,name=Source,proto3" json:"Source"`
	Operation     string `protobuf:"bytes,15,opt,name=Operation,proto3" json:"Operation"`
	Resource      string `protobuf:"bytes,16,opt,name=Resource,proto3" json:"Resource"`
	Data          string `protobuf:"bytes,17,opt,name=Data,proto3" json:"Data,omitempty"`
	Action        string `protobuf:"bytes,18,opt,name=Action,proto3" json:"Action,omitempty"`
	Result        string `protobuf:"bytes,19,opt,name=Result,proto3" json:"Result"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubearmor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{7}
}

func (x *Log) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *Log) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *Log) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *Log) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *Log) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *Log) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *Log) GetHostPID() int32 {
	if x != nil {
		return x.HostPID
	}
	return 0
}

func (x *Log) GetPPID() int32 {
	if x != nil {
		return x.PPID
	}
	return 0
}

func (x *Log) GetPID() int32 {
	if x != nil {
		return x.PID
	}
	return 0
}

func (x *Log) GetUID() int32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *Log) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *Log) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Log) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Log) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Log) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *Log) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Log) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Log) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Log) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// request message
type RequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter string `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *RequestMessage) Reset() {
	*x = RequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubearmor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMessage) ProtoMessage() {}

func (x *RequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMessage.ProtoReflect.Descriptor instead.
func (*RequestMessage) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{8}
}

func (x *RequestMessage) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// reply message
type ReplyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retval int32 `protobuf:"varint,1,opt,name=Retval,proto3" json:"Retval,omitempty"`
}

func (x *ReplyMessage) Reset() {
	*x = ReplyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubearmor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyMessage) ProtoMessage() {}

func (x *ReplyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_kubearmor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyMessage.ProtoReflect.Descriptor instead.
func (*ReplyMessage) Descriptor() ([]byte, []int) {
	return file_kubearmor_proto_rawDescGZIP(), []int{9}
}

func (x *ReplyMessage) GetRetval() int32 {
	if x != nil {
		return x.Retval
	}
	return 0
}

var File_kubearmor_proto protoreflect.FileDescriptor

var file_kubearmor_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x22, 0x24, 0x0a, 0x0c, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x50, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe3, 0x01, 0x0a,
	0x11, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa3, 0x02, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72,
	0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x50, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x83, 0x04, 0x0a, 0x03, 0x4c, 0x6f,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x50,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x50, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x50, 0x50, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x28, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x26, 0x0a, 0x0c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x74,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65, 0x74, 0x76, 0x61,
	0x6c, 0x32, 0xf3, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x14, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x30, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x73,
	0x12, 0x16, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0b, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kubearmor_proto_rawDescOnce sync.Once
	file_kubearmor_proto_rawDescData = file_kubearmor_proto_rawDesc
)

func file_kubearmor_proto_rawDescGZIP() []byte {
	file_kubearmor_proto_rawDescOnce.Do(func() {
		file_kubearmor_proto_rawDescData = protoimpl.X.CompressGZIP(file_kubearmor_proto_rawDescData)
	})
	return file_kubearmor_proto_rawDescData
}

var file_kubearmor_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_kubearmor_proto_goTypes = []interface{}{
	(*NonceMessage)(nil),      // 0: feeder.NonceMessage
	(*Message)(nil),           // 1: feeder.Message
	(*HostStatType)(nil),      // 2: feeder.HostStatType
	(*NamespaceStatType)(nil), // 3: feeder.NamespaceStatType
	(*PodStatType)(nil),       // 4: feeder.PodStatType
	(*ContainerStatType)(nil), // 5: feeder.ContainerStatType
	(*Stats)(nil),             // 6: feeder.Stats
	(*Log)(nil),               // 7: feeder.Log
	(*RequestMessage)(nil),    // 8: feeder.RequestMessage
	(*ReplyMessage)(nil),      // 9: feeder.ReplyMessage
}
var file_kubearmor_proto_depIdxs = []int32{
	2, // 0: feeder.Stats.HostStats:type_name -> feeder.HostStatType
	3, // 1: feeder.Stats.NamespaceStats:type_name -> feeder.NamespaceStatType
	4, // 2: feeder.Stats.PodStats:type_name -> feeder.PodStatType
	5, // 3: feeder.Stats.ContainerStats:type_name -> feeder.ContainerStatType
	0, // 4: feeder.LogService.HealthCheck:input_type -> feeder.NonceMessage
	8, // 5: feeder.LogService.WatchMessages:input_type -> feeder.RequestMessage
	8, // 6: feeder.LogService.WatchStatistics:input_type -> feeder.RequestMessage
	8, // 7: feeder.LogService.WatchLogs:input_type -> feeder.RequestMessage
	9, // 8: feeder.LogService.HealthCheck:output_type -> feeder.ReplyMessage
	1, // 9: feeder.LogService.WatchMessages:output_type -> feeder.Message
	6, // 10: feeder.LogService.WatchStatistics:output_type -> feeder.Stats
	7, // 11: feeder.LogService.WatchLogs:output_type -> feeder.Log
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_kubearmor_proto_init() }
func file_kubearmor_proto_init() {
	if File_kubearmor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kubearmor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubearmor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubearmor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostStatType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubearmor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceStatType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubearmor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodStatType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubearmor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStatType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubearmor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubearmor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubearmor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubearmor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kubearmor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kubearmor_proto_goTypes,
		DependencyIndexes: file_kubearmor_proto_depIdxs,
		MessageInfos:      file_kubearmor_proto_msgTypes,
	}.Build()
	File_kubearmor_proto = out.File
	file_kubearmor_proto_rawDesc = nil
	file_kubearmor_proto_goTypes = nil
	file_kubearmor_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogServiceClient interface {
	HealthCheck(ctx context.Context, in *NonceMessage, opts ...grpc.CallOption) (*ReplyMessage, error)
	WatchMessages(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (LogService_WatchMessagesClient, error)
	WatchStatistics(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (LogService_WatchStatisticsClient, error)
	WatchLogs(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (LogService_WatchLogsClient, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) HealthCheck(ctx context.Context, in *NonceMessage, opts ...grpc.CallOption) (*ReplyMessage, error) {
	out := new(ReplyMessage)
	err := c.cc.Invoke(ctx, "/feeder.LogService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) WatchMessages(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (LogService_WatchMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogService_serviceDesc.Streams[0], "/feeder.LogService/WatchMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceWatchMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogService_WatchMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type logServiceWatchMessagesClient struct {
	grpc.ClientStream
}

func (x *logServiceWatchMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServiceClient) WatchStatistics(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (LogService_WatchStatisticsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogService_serviceDesc.Streams[1], "/feeder.LogService/WatchStatistics", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceWatchStatisticsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogService_WatchStatisticsClient interface {
	Recv() (*Stats, error)
	grpc.ClientStream
}

type logServiceWatchStatisticsClient struct {
	grpc.ClientStream
}

func (x *logServiceWatchStatisticsClient) Recv() (*Stats, error) {
	m := new(Stats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServiceClient) WatchLogs(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (LogService_WatchLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogService_serviceDesc.Streams[2], "/feeder.LogService/WatchLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceWatchLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogService_WatchLogsClient interface {
	Recv() (*Log, error)
	grpc.ClientStream
}

type logServiceWatchLogsClient struct {
	grpc.ClientStream
}

func (x *logServiceWatchLogsClient) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServiceServer is the server API for LogService service.
type LogServiceServer interface {
	HealthCheck(context.Context, *NonceMessage) (*ReplyMessage, error)
	WatchMessages(*RequestMessage, LogService_WatchMessagesServer) error
	WatchStatistics(*RequestMessage, LogService_WatchStatisticsServer) error
	WatchLogs(*RequestMessage, LogService_WatchLogsServer) error
}

// UnimplementedLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (*UnimplementedLogServiceServer) HealthCheck(context.Context, *NonceMessage) (*ReplyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedLogServiceServer) WatchMessages(*RequestMessage, LogService_WatchMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchMessages not implemented")
}
func (*UnimplementedLogServiceServer) WatchStatistics(*RequestMessage, LogService_WatchStatisticsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchStatistics not implemented")
}
func (*UnimplementedLogServiceServer) WatchLogs(*RequestMessage, LogService_WatchLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchLogs not implemented")
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feeder.LogService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).HealthCheck(ctx, req.(*NonceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_WatchMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).WatchMessages(m, &logServiceWatchMessagesServer{stream})
}

type LogService_WatchMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type logServiceWatchMessagesServer struct {
	grpc.ServerStream
}

func (x *logServiceWatchMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _LogService_WatchStatistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).WatchStatistics(m, &logServiceWatchStatisticsServer{stream})
}

type LogService_WatchStatisticsServer interface {
	Send(*Stats) error
	grpc.ServerStream
}

type logServiceWatchStatisticsServer struct {
	grpc.ServerStream
}

func (x *logServiceWatchStatisticsServer) Send(m *Stats) error {
	return x.ServerStream.SendMsg(m)
}

func _LogService_WatchLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).WatchLogs(m, &logServiceWatchLogsServer{stream})
}

type LogService_WatchLogsServer interface {
	Send(*Log) error
	grpc.ServerStream
}

type logServiceWatchLogsServer struct {
	grpc.ServerStream
}

func (x *logServiceWatchLogsServer) Send(m *Log) error {
	return x.ServerStream.SendMsg(m)
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "feeder.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _LogService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchMessages",
			Handler:       _LogService_WatchMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchStatistics",
			Handler:       _LogService_WatchStatistics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchLogs",
			Handler:       _LogService_WatchLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kubearmor.proto",
}
